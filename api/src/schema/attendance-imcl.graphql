extend type Fellowship {
  imclTotal: Int!
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(imcl:Active:IMCL)  WHERE NOT imcl:Lost
      AND imcl.imclChecked = false
      RETURN COUNT(imcl)
      """
    )
}

extend type Bacenta {
  imclTotal: Int!
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(imcl:Active:IMCL)  WHERE NOT imcl:Lost
      AND imcl.imclChecked = false
      RETURN COUNT(imcl)
      """
    )
}

extend type Governorship {
  imclTotal: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacenta:Bacenta)<-[:BELONGS_TO]-(imcl:Active:IMCL)  WHERE NOT imcl:Lost
      AND imcl.imclChecked = false
      RETURN COUNT(imcl)
      """
    )
}

extend type Council {
  imclTotal: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(governorship:Governorship)-[:HAS]->(bacenta:Bacenta)<-[:BELONGS_TO]-(imcl:Active:IMCL)  WHERE NOT imcl:Lost
      AND imcl.imclChecked = false
      RETURN COUNT(imcl)
      """
    )
}

extend type Stream {
  imclTotal: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council:Council)-[:HAS]->(governorship:Governorship)-[:HAS]->(bacenta:Bacenta)<-[:BELONGS_TO]-(imcl:Active:IMCL)  WHERE NOT imcl:Lost
      AND imcl.imclChecked = false
      RETURN COUNT(imcl)
      """
    )
}

extend type Campus {
  imclTotal: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS]->(council:Council)-[:HAS]->(governorship:Governorship)-[:HAS]->(bacenta:Bacenta)<-[:BELONGS_TO]-(imcl:Active:IMCL)  WHERE NOT imcl:Lost
      AND imcl.imclChecked = false
      RETURN COUNT(imcl)
      """
    )
}

extend type Hub {
  imclTotal: Int!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(creativearts:CreativeArts)
      MATCH (this)<-[:HAS_MINISTRY]-(governorship:Governorship)-[:HAS*2]->(fellowship:Fellowship)
      MATCH (creativearts)<-[:BELONGS_TO]-(imcl:Active:Member)-[:BELONGS_TO]->(fellowship)
      WHERE NOT imcl:Lost AND imcl.rehearsalIMCLChecked = false
      RETURN COUNT(imcl)
      """
    )
}

extend type IMCL {
  imclChecked: Boolean!
    @cypher(
      statement: """
      MATCH (this)
      RETURN COALESCE(this.imclChecked, false) = true OR COALESCE(this.rehearsalIMCLChecked, false) = true
      """
    )
  lastMissedServiceDate: DateTime!
  missedChurchComments: [MissedChurchComment!]!
    @relationship(type: "COMMENTS_ON", direction: IN)
}

extend type Mutation {
  RecordReasonForMemberAbsence(
    memberId: ID!
    reason: String!
    roleLevel: String!
  ): IMCL!
    @auth(
      rules: [{ roles: ["leaderBacenta", "leaderGovernorship", "leaderHub"] }]
    )
    @cypher(
      statement: """
      MATCH (member:Member {id: $memberId})
      MATCH (author:Member {auth_id: $auth.jwt.sub})

      MERGE (date:TimeGraph {date: date()})
      MERGE (comment:PastoralComment:MissedChurchComment {id: randomUUID()})
      MERGE (comment)-[:COMMENTS_ON]->(member)
      MERGE (comment)-[:WRITTEN_ON]->(date)
      MERGE (author)-[:WROTE]->(comment)
          SET comment.timestamp = datetime(),
          comment.comment = $reason,
          comment.activity = 'Missed Church',
          comment.roleLevel = $roleLevel,
          member.imclChecked = true
        REMOVE member.rehearsalIMCLChecked

      RETURN member
      """
    )
}
