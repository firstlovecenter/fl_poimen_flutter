type Last4Services {
  service: String!
  present: Boolean!
  date: Date!
}

extend type Member {
  lastAttendedServiceDate: Date
  lastFourWeekdayServices: [Last4Services!]!
  lastFourWeekendServices: [Last4Services!]!
}

extend type Bacenta {
  services(limit: Int!): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records,date WHERE NOT (records:NoService)
      WITH records, date ORDER BY date.date DESC LIMIT $limit
      RETURN DISTINCT records
      """
    )
  bussing(limit: Int!): [BussingRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(records:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WITH records, date ORDER BY date.date DESC LIMIT $limit
      RETURN records
      """
    )
}

extend type Hub {
  services(limit: Int!): [RehearsalRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:RehearsalRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WHERE NOT (records:NoService)
      WITH records, date ORDER BY date.date DESC LIMIT $limit
      RETURN records
      """
    )
}

extend type ServiceRecord {
  markedAttendance(churchId: ID!): Boolean!
  membersPicture: [String!]!
    @cypher(statement: "MATCH (this) RETURN collect(this.familyPicture)")
  membersPresent: [Member!]!
    @relationship(type: "PRESENT_AT_SERVICE", direction: IN)
  membersPresentFromBacenta(id: ID!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:PRESENT_AT_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN DISTINCT member ORDER BY member.lastName, member.firstName
      """
    )
  membersPresentFromBacentaCount(id: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:PRESENT_AT_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN COUNT( DISTINCT member)
      """
    )
  membersAbsent: [Member!]!
    @relationship(type: "ABSENT_FROM_SERVICE", direction: IN)
  membersAbsentFromBacenta(id: ID!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN DISTINCT member ORDER BY member.lastName, member.firstName
      """
    )
  membersAbsentFromBacentaCount(id: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN COUNT( DISTINCT member)
      """
    )
}

extend type BussingRecord {
  markedAttendance(churchId: ID!): Boolean!
  membersPicture: [String!]!
    @cypher(
      statement: "MATCH (this)-[:INCLUDES_RECORD]->(vehicle:VehicleRecord) RETURN collect(vehicle.picture)"
    )
  membersPresent: [Member!]!
    @relationship(type: "PRESENT_AT_SERVICE", direction: IN)
  membersPresentFromBacenta(id: ID!): [Member!]!
    @cypher(
      statement: """
       MATCH (this)<-[:PRESENT_AT_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN DISTINCT member ORDER BY member.lastName, member.firstName
      """
    )
  membersPresentFromBacentaCount(id: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:PRESENT_AT_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN COUNT( DISTINCT member)
      """
    )
  membersAbsent: [Member!]!
    @relationship(type: "ABSENT_FROM_SERVICE", direction: IN)
  membersAbsentFromBacenta(id: ID!): [Member!]!
    @cypher(
      statement: """
       MATCH (this)<-[:ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN DISTINCT member ORDER BY member.lastName, member.firstName
      """
    )
  membersAbsentFromBacentaCount(id: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN COUNT( DISTINCT member)
      """
    )
}

extend type PoimenRecord {
  markedAttendance(churchId: ID!): Boolean!
    @cypher(
      statement: """
      RETURN true
      """
    )
  membersPicture: [String!]!
    @cypher(statement: "MATCH (this) RETURN collect(this.familyPicture)")
  membersPresent: [Member!]!
    @relationship(type: "PRESENT_AT_SERVICE", direction: IN)
  membersPresentFromBacenta(id: ID!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:PRESENT_AT_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN DISTINCT member ORDER BY member.lastName, member.firstName
      """
    )
  membersPresentFromBacentaCount(id: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:PRESENT_AT_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN COUNT( DISTINCT member)
      """
    )
  membersAbsent: [Member!]!
    @relationship(type: "ABSENT_FROM_SERVICE", direction: IN)
  membersAbsentFromBacenta(id: ID!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN DISTINCT member ORDER BY member.lastName, member.firstName
      """
    )
  membersAbsentFromBacentaCount(id: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta:Bacenta {id: $id})
      RETURN COUNT( DISTINCT member)
      """
    )
}

extend type RehearsalRecord {
  markedAttendance(churchId: ID!): Boolean!
    @cypher(
      statement: """
      MATCH (hub:Hub {id: $churchId})<-[:HAS_MINISTRY]-(governorship:Governorship)-[:HAS]->(bacenta:Bacenta)
      MATCH (hub)<-[:HAS*3]-(creativearts:CreativeArts)
      MATCH (this)<-[:PRESENT_AT_SERVICE|ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(bacenta)
      MATCH (member)-[:BELONGS_TO]->(creativearts)
      RETURN COUNT(member) > 0 AS markedAttendance
      """
    )
  membersPicture: [String!]!
    @cypher(statement: "MATCH (this) RETURN collect(this.familyPicture)")
  membersPresent: [Member!]!
    @relationship(type: "PRESENT_AT_SERVICE", direction: IN)
  membersPresentFromHub(id: ID!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:PRESENT_AT_SERVICE]-(member:Member)-[:BELONGS_TO]->(hub:Hub {id: $id})
      RETURN DISTINCT member ORDER BY member.lastName, member.firstName
      """
    )
  membersPresentFromHubCount(id: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:PRESENT_AT_SERVICE]-(member:Member)-[:BELONGS_TO]->(hub:Hub {id: $id})
      RETURN COUNT(DISTINCT member)
      """
    )
  membersAbsent: [Member!]!
    @relationship(type: "ABSENT_FROM_SERVICE", direction: IN)
  membersAbsentFromHub(id: ID!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(hub:Hub {id: $id})
      RETURN DISTINCT member ORDER BY member.lastName, member.firstName
      """
    )
  membersAbsentFromHubCount(id: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:ABSENT_FROM_SERVICE]-(member:Member)-[:BELONGS_TO]->(hub:Hub {id: $id})
      RETURN COUNT(DISTINCT member)
      """
    )
}

type Mutation {
  RecordMembershipAttendance(
    bacentaId: ID!
    presentMembers: [ID!]!
    absentMembers: [ID!]!
    recordId: ID!
  ): ServiceRecord!

  RecordMembershipAttendanceOnDate(
    governorshipId: ID!
    presentMembers: [ID!]!
    absentMembers: [ID!]!
    date: String!
  ): PoimenRecord!

  RecordMembershipRehearsalAttendance(
    hubId: ID!
    presentMembers: [ID!]!
    absentMembers: [ID!]!
    recordId: ID!
  ): RehearsalRecord!
}
