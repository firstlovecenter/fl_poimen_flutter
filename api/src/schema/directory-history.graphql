extend type Mutation {
  LogMemberHistory(ids: [ID], historyRecord: String!): Member!
    @auth(rules: [{ isAuthenticated: true }])
    @cypher(
      statement: """
       CREATE (log:HistoryLog)
         SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.historyRecord = $historyRecord

       WITH  log
      MERGE (date:TimeGraph {date: date()})

      WITH log, date
      MATCH (author:Active:Member {auth_id: $auth.jwt.sub})
       MERGE (log)-[:LOGGED_BY]->(author)
       MERGE (log)-[:RECORDED_ON]->(date)


      WITH log
       UNWIND $ids AS nodeId
       MATCH (node {id: nodeId}) WHERE node:Active:Member OR node:Fellowship
       MERGE (node)-[:HAS_HISTORY]->(log)

       WITH node WHERE node:Active:Member

      RETURN node
      """
    )
}
