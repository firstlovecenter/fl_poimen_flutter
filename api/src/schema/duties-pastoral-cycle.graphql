interface PastoralCommentInterface {
  id: ID!
  typename: String!
  timestamp: DateTime!
  activity: String!
  roleLevel: String!
  comment: String!
  author: Member! @relationship(type: "WROTE", direction: IN)
}

type MissedChurchComment implements PastoralCommentInterface {
  id: ID!
  typename: String!
  activity: String!
  roleLevel: String!
  timestamp: DateTime!
  comment: String!
  author: Member!
}

type PastoralComment implements PastoralCommentInterface {
  id: ID!
  typename: String!
  activity: String!
  roleLevel: String!
  timestamp: DateTime!
  comment: String!
  author: Member!
}

extend type Member {
  pastoralComments(limit: Int! = 3): [PastoralComment!]! @customResolver
}

type MembershipData {
  id: ID!
  typename: String! @customResolver
  updatedAt: DateTime!
  updatedBy: Member! @relationship(type: "UPDATED_BY", direction: OUT)
  membersCount: Int!
  sheepCount: Int!
  goatsCount: Int!
  deerCount: Int!
}

interface PastoralCycleInterface {
  id: ID!
  typename: String! @customResolver
  startDate: DateTime!
  endDate: DateTime!
  numberOfDays: Int!
  membershipDataByChurch(churchId: ID!): MembershipData
    @cypher(
      statement: """
      MATCH (this)
      MATCH (church {id: $churchId})-[:HAS_HISTORY]->(log:ServiceLog)
      MATCH (log)-[:HAS_DATA]->(data:MembershipData)-[:DURING_CYCLE]->(this)
      RETURN data
      """
    )
  visitationsByChurch(churchId: ID!): [VisitationActivity!]!
  visitationsByChurchCount(churchId: ID!): Int!
  prayersByChurch(churchId: ID!): [PrayerActivity!]!
  prayersByChurchCount(churchId: ID!): Int!
  telepastoringsByChurch(churchId: ID!): [TelepastoringActivity!]!
  telepastoringsByChurchCount(churchId: ID!): Int!
}

type PastoralCycle implements PastoralCycleInterface {
  id: ID!
  typename: String! @customResolver
  startDate: DateTime!
  endDate: DateTime!
  numberOfDays: Int!
  membershipDataByChurch(churchId: ID!): MembershipData
  visitationsByChurch(churchId: ID!): [VisitationActivity!]!
  visitationsByChurchCount(churchId: ID!): Int!
  prayersByChurch(churchId: ID!): [PrayerActivity!]!
  prayersByChurchCount(churchId: ID!): Int!
  telepastoringsByChurch(churchId: ID!): [TelepastoringActivity!]!
  telepastoringsByChurchCount(churchId: ID!): Int!
}

type BacentaCycle implements PastoralCycleInterface
  @auth(rules: [{ roles: ["leaderFellowship", "leaderBacenta"] }]) {
  id: ID!
  typename: String!
  startDate: DateTime!
  endDate: DateTime!
  duration: Duration!
  numberOfDays: Int!
  num: Int!
  month: Int!
  year: Int!
  membershipDataByChurch(churchId: ID!): MembershipData
  visitationsByChurch(churchId: ID!): [VisitationActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(visitation:VisitationActivity)-[:TOWARDS]->(member)
      MATCH (fellowship:Fellowship {id: $churchId})<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT visitation ORDER BY visitation.datetime DESC
      """
    )
  visitationsByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(visitation:VisitationActivity)-[:TOWARDS]->(member)
      MATCH (fellowship:Fellowship {id: $churchId})<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT visitation)
      """
    )
  prayersByChurch(churchId: ID!): [PrayerActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(prayer:PrayerActivity)-[:TOWARDS]->(member)
      MATCH (fellowship:Fellowship {id: $churchId})<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT prayer ORDER BY prayer.datetime DESC
      """
    )
  prayersByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(prayer:PrayerActivity)-[:TOWARDS]->(member)
      MATCH (fellowship:Fellowship {id: $churchId})<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT prayer)
      """
    )
  telepastoringsByChurch(churchId: ID!): [TelepastoringActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(telepastoring:TelepastoringActivity)-[:TOWARDS]->(member)
      MATCH (fellowship:Fellowship {id: $churchId})<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT telepastoring ORDER BY telepastoring.datetime DESC
      """
    )
  telepastoringsByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(telepastoring:TelepastoringActivity)-[:TOWARDS]->(member)
      MATCH (fellowship:Fellowship {id: $churchId})<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT telepastoring)
      """
    )
}

type GovernorshipCycle implements PastoralCycleInterface
  @auth(rules: [{ roles: ["leaderGovernorship"] }]) {
  id: ID!
  typename: String! @customResolver
  startDate: DateTime!
  endDate: DateTime!
  numberOfDays: Int!
  membershipDataByChurch(churchId: ID!): MembershipData
  visitationsByChurch(churchId: ID!): [VisitationActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(visitation:VisitationActivity)-[:TOWARDS]->(member)
      MATCH (governorship:Governorship {id: $churchId})-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT visitation ORDER BY visitation.datetime DESC
      """
    )
  visitationsByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(visitation:VisitationActivity)-[:TOWARDS]->(member)
      MATCH (governorship:Governorship {id: $churchId})-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT visitation)
      """
    )
  prayersByChurch(churchId: ID!): [PrayerActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(prayer:PrayerActivity)-[:TOWARDS]->(member)
      MATCH (governorship:Governorship {id: $churchId})-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT prayer ORDER BY prayer.datetime DESC
      """
    )
  prayersByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(prayer:PrayerActivity)-[:TOWARDS]->(member)
      MATCH (governorship:Governorship {id: $churchId})-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT prayer)
      """
    )
  telepastoringsByChurch(churchId: ID!): [TelepastoringActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(telepastoring:TelepastoringActivity)-[:TOWARDS]->(member)
      MATCH (governorship:Governorship {id: $churchId})-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT telepastoring ORDER BY telepastoring.datetime DESC
      """
    )
  telepastoringsByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(telepastoring:TelepastoringActivity)-[:TOWARDS]->(member)
      MATCH (governorship:Governorship {id: $churchId})-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT telepastoring)
      """
    )
}

type CouncilCycle implements PastoralCycleInterface
  @auth(rules: [{ roles: ["leaderCouncil"] }]) {
  id: ID!
  typename: String! @customResolver
  startDate: DateTime!
  endDate: DateTime!
  numberOfDays: Int!
  membershipDataByChurch(churchId: ID!): MembershipData
  visitationsByChurch(churchId: ID!): [VisitationActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(visitation:VisitationActivity)-[:TOWARDS]->(member)
      MATCH (council:Council {id: $churchId})-[:HAS*3]->(:Governorship)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT visitation ORDER BY visitation.datetime DESC
      """
    )
  visitationsByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(visitation:VisitationActivity)-[:TOWARDS]->(member)
      MATCH (council:Council {id: $churchId})-[:HAS*3]->(:Governorship)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT visitation)
      """
    )
  prayersByChurch(churchId: ID!): [PrayerActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(prayer:PrayerActivity)-[:TOWARDS]->(member)
      MATCH (council:Council {id: $churchId})-[:HAS*3]->(:Governorship)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT prayer ORDER BY prayer.datetime DESC
      """
    )
  prayersByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(prayer:PrayerActivity)-[:TOWARDS]->(member)
      MATCH (council:Council {id: $churchId})-[:HAS*3]->(:Governorship)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT prayer)
      """
    )
  telepastoringsByChurch(churchId: ID!): [TelepastoringActivity!]!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(telepastoring:TelepastoringActivity)-[:TOWARDS]->(member)
      MATCH (council:Council {id: $churchId})-[:HAS*3]->(:Governorship)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN DISTINCT telepastoring ORDER BY telepastoring.datetime DESC
      """
    )
  telepastoringsByChurchCount(churchId: ID!): Int!
    @cypher(
      statement: """
      MATCH (this)<-[:DURING_CYCLE]-(telepastoring:TelepastoringActivity)-[:TOWARDS]->(member)
      MATCH (council:Council {id: $churchId})-[:HAS*3]->(:Governorship)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(member:Member)
      RETURN COUNT(DISTINCT telepastoring)
      """
    )
}

extend type Fellowship {
  currentPastoralCycle: BacentaCycle!
    @cypher(
      statement: """
      WITH datetime({year: date().year, month: date().month, day: 1}) AS startDate,
        datetime({year: date().year, month: date().month, day: 1,  hour: 23, minute: 59, second: 59}) + duration({months: 1}) - duration({days: 1}) AS endDate

      MERGE (cycle:BacentaCycle {month: date().month, year: date().year})
        ON CREATE SET cycle.id = apoc.create.uuid(),
          cycle.startDate = startDate,
          cycle.endDate = endDate,
          cycle.duration = duration.inDays(startDate,endDate)

      RETURN cycle
      """
    )
  currentCycleMembershipData: MembershipData
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(log:ServiceLog)
      MATCH (cycle:BacentaCycle {month: date().month, year: date().year})
      MATCH (log)-[:HAS_DATA]->(data:MembershipData)-[:DURING_CYCLE]->(cycle)
      RETURN data
      """
    )
  pastoralCycles(limit: Int! = 12): [BacentaCycle!]!
    @cypher(
      statement: """
      MATCH (cycle:BacentaCycle) WHERE cycle.startDate < datetime()
      RETURN cycle ORDER BY cycle.startDate DESC LIMIT $limit
      """
    )
}

extend type Bacenta {
  currentPastoralCycle: BacentaCycle!
    @cypher(
      statement: """
      WITH datetime({year: date().year, month: date().month, day: 1}) AS startDate,
        datetime({year: date().year, month: date().month, day: 1,  hour: 23, minute: 59, second: 59}) + duration({months: 1}) - duration({days: 1}) AS endDate

      MERGE (cycle:BacentaCycle {month: date().month, year: date().year})
        ON CREATE SET cycle.id = apoc.create.uuid(),
          cycle.startDate = startDate,
          cycle.endDate = endDate,
          cycle.duration = duration.inDays(startDate,endDate)

      RETURN cycle
      """
    )
  currentCycleMembershipData: MembershipData
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(log:ServiceLog)
      MATCH (cycle:BacentaCycle {month: date().month, year: date().year})
      MATCH (log)-[:HAS_DATA]->(data:MembershipData)-[:DURING_CYCLE]->(cycle)
      RETURN data
      """
    )
  pastoralCycles(limit: Int! = 12): [BacentaCycle!]!
    @cypher(
      statement: """
      MATCH (cycle:BacentaCycle) WHERE cycle.startDate < datetime()
      RETURN cycle ORDER BY cycle.startDate DESC LIMIT $limit
      """
    )
}

extend type Governorship {
  currentPastoralCycle: GovernorshipCycle!
    @cypher(
      statement: """
      WITH datetime({year: date().year, quarter: date().quarter, dayOfQuarter: 1}) AS startDate,
      datetime({year: date().year, quarter: date().quarter, dayOfQuarter: 1,  hour: 23, minute: 59, second: 59}) + duration({months: 3}) - duration({days: 1}) AS endDate

      MERGE (cycle:GovernorshipCycle {quarter: date().quarter, year: date().year})
        ON CREATE SET cycle.id = apoc.create.uuid(),
          cycle.startDate = startDate,
          cycle.endDate = endDate,
          cycle.duration = duration.inDays(startDate,endDate)

      RETURN cycle
      """
    )
  currentCycleMembershipData: MembershipData
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(log:ServiceLog)
      MATCH (cycle:GovernorshipCycle {quarter: date().quarter, year: date().year})
      MATCH (log)-[:HAS_DATA]->(data:MembershipData)-[:DURING_CYCLE]->(cycle)
      RETURN data
      """
    )
  pastoralCycles(limit: Int! = 12): [GovernorshipCycle!]!
    @cypher(
      statement: """
      MATCH (cycle:GovernorshipCycle) WHERE cycle.startDate < datetime()
      RETURN cycle ORDER BY cycle.startDate DESC LIMIT $limit
      """
    )
}

extend type Council {
  currentPastoralCycle: CouncilCycle!
    @cypher(
      statement: """
      WITH toInteger(ceil(toFloat(date().month)/toFloat(6))) - 1 AS halfOfYear,
        [1,7] AS month

      WITH month,
       halfOfYear,
      datetime({year: date().year, month: month[halfOfYear], day: 1}) AS startDate,
      datetime({year: date().year, month: month[halfOfYear], day: 1,  hour: 23, minute: 59, second: 59})
        + duration({months: 6}) - duration({days: 1})  AS endDate

        MERGE (cycle:CouncilCycle {half: halfOfYear, year: date().year})
        ON CREATE SET cycle.id = apoc.create.uuid(),
          cycle.startDate = startDate,
          cycle.endDate = endDate,
          cycle.duration = duration.inDays(startDate,endDate)

      RETURN cycle
      """
    )
  currentCycleMembershipData: MembershipData
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(log:ServiceLog)
      WITH this, log, toInteger(ceil(toFloat(date().month)/toFloat(6))) - 1 AS halfOfYear
      MATCH (cycle:CouncilCycle {half: halfOfYear, year: date().year})
      MATCH (log)-[:HAS_DATA]->(data:MembershipData)-[:DURING_CYCLE]->(cycle)
      RETURN data
      """
    )
  pastoralCycles(limit: Int! = 12): [CouncilCycle!]!
    @cypher(
      statement: """
      MATCH (cycle:CouncilCycle) WHERE cycle.startDate < datetime()
      RETURN cycle ORDER BY cycle.startDate DESC LIMIT $limit
      """
    )
}

extend type Hub {
  currentPastoralCycle: BacentaCycle!
    @cypher(
      statement: """
      WITH datetime({year: date().year, month: date().month, day: 1}) AS startDate,
        datetime({year: date().year, month: date().month, day: 1,  hour: 23, minute: 59, second: 59}) + duration({months: 1}) - duration({days: 1}) AS endDate

      MERGE (cycle:BacentaCycle {month: date().month, year: date().year})
        ON CREATE SET cycle.id = apoc.create.uuid(),
          cycle.startDate = startDate,
          cycle.endDate = endDate,
          cycle.duration = duration.inDays(startDate,endDate)

      RETURN cycle
      """
    )
  currentCycleMembershipData: MembershipData
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(log:ServiceLog)
      MATCH (cycle:BacentaCycle {month: date().month, year: date().year})
      MATCH (log)-[:HAS_DATA]->(data:MembershipData)-[:DURING_CYCLE]->(cycle)
      RETURN data
      """
    )
  pastoralCycles(limit: Int! = 12): [BacentaCycle!]!
    @cypher(
      statement: """
      MATCH (cycle:BacentaCycle) WHERE cycle.startDate < datetime()
      RETURN cycle ORDER BY cycle.startDate DESC LIMIT $limit
      """
    )
}

extend type HubCouncil {
  currentPastoralCycle: GovernorshipCycle!
    @cypher(
      statement: """
      WITH datetime({year: date().year, quarter: date().quarter, dayOfQuarter: 1}) AS startDate,
      datetime({year: date().year, quarter: date().quarter, dayOfQuarter: 1,  hour: 23, minute: 59, second: 59}) + duration({months: 3}) - duration({days: 1}) AS endDate

      MERGE (cycle:GovernorshipCycle {quarter: date().quarter, year: date().year})
        ON CREATE SET cycle.id = apoc.create.uuid(),
          cycle.startDate = startDate,
          cycle.endDate = endDate,
          cycle.duration = duration.inDays(startDate,endDate)

      RETURN cycle
      """
    )
  currentCycleMembershipData: MembershipData
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(log:ServiceLog)
      MATCH (cycle:GovernorshipCycle {quarter: date().quarter, year: date().year})
      MATCH (log)-[:HAS_DATA]->(data:MembershipData)-[:DURING_CYCLE]->(cycle)
      RETURN data
      """
    )
  pastoralCycles(limit: Int! = 12): [GovernorshipCycle!]!
    @cypher(
      statement: """
      MATCH (cycle:GovernorshipCycle) WHERE cycle.startDate < datetime()
      RETURN cycle ORDER BY cycle.startDate DESC LIMIT $limit
      """
    )
}
