/* eslint-disable import/no-extraneous-dependencies */

import { ApolloServer } from 'apollo-server-express'
import express from 'express'
import neo4j from 'neo4j-driver'
import { Neo4jGraphQL } from '@neo4j/graphql'
import { Neo4jGraphQLAuthJWTPlugin } from '@neo4j/graphql-plugin-auth'
import dotenv from 'dotenv'
import { typeDefs } from './schema/graphql-schema'
import resolvers from './resolvers/resolvers'
import SECRETS from './resolvers/getSecrets'

// set environment variables from .env
dotenv.config()

const app = express()

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  SECRETS.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(
    SECRETS.NEO4J_USER || 'neo4j',
    SECRETS.NEO4J_PASSWORD || 'letmein'
  ),
  {
    encrypted: SECRETS.NEO4J_ENCRYPTED === 'true',
  }
)
/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Read more in the docs:
 * https://neo4j.com/docs/graphql-manual/current/
 */

const neoSchema = new Neo4jGraphQL({
  typeDefs,
  resolvers,
  driver,
  plugins: {
    auth: new Neo4jGraphQLAuthJWTPlugin({
      secret: SECRETS.JWT_SECRET ?? '',
      rolesPath: 'https://flcadmin\\.netlify\\.app/roles',
    }),
  },
})

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */

// Specify host, port and path for GraphQL endpoint
const port = SECRETS.GRAPHQL_SERVER_PORT || 4001
const path = SECRETS.GRAPHQL_SERVER_PATH || '/graphql'
const host = SECRETS.GRAPHQL_SERVER_HOST || '0.0.0.0'

const startServer = async () => {
  const schema = await neoSchema.getSchema()

  const server = new ApolloServer({
    context: ({ req }) => req,
    introspection: true,
    schema,
  })

  await server.start()
  server.applyMiddleware({ app, path })
}

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */

startServer()

app.listen({ host, port, path }, () => {
  // eslint-disable-next-line
  console.log(`GraphQL server ready at http://${host}:${port}${path}`)
})
